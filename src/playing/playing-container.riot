<playing-container>
  <div if={ props.show }>

  <card-display
    if= { !state.editing && !props.outOfCards }
    card={props.card}
    edit-card={ startEditing }
    session={ props.session }
    load-next-card={ props.loadNextCard }
    update-deck={ props.updateDeck }
    showing-front={ state.defaultPlay }
  >
  </card-display>

  <card-edit
    if={ state.editing }
    card={ props.card }
    finish-editing={ finishEditing }
    update-deck={props.updateDeck}
  ></card-edit>

  <end-screen
    if={ props.outOfCards }
    session={ props.session }
    on-practice-again={ props.onPracticeAgain }
    on-edit-deck={ props.onEditDeck }
  ></end-screen>

  </div>

  <style>
    .startscreen {
      text-align: center;
    }
    .startscreen button {
      display: block;
    }

  </style>

  <script>
    const CardDisplay = require('./carddisplay.riot').default
    const EndScreen = require('./end-screen.riot').default
    const { register } = require('riot')
    register('card-display', CardDisplay)
    register('end-screen', EndScreen)

  export default {
    onBeforeMount() {
      this.state = {
        editing: false,
        defaultPlay: true,
        // default play is showing front and asking for back
      }
    },

    onBeforeUpdate(props, state) {
      if (props.session.setting == 'default') {
        this.state.defaultPlay = true
      }
      else if (props.session.setting == 'reverse') {
        this.state.defaultPlay = false
      }
    },

    finishEditing() {
      this.update({
        editing: false,
      })
      this.props.loadNextCard()
    },

    startEditing() {
      this.update({
        editing: true,
      })
    },

  }
  </script>
</playing-container>
