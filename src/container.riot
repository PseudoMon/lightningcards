<container>
  <div>
    <notification>{ state.notificationMessage }</notification>

    <!-- Somehow I can't use if={true} in this main container.
          The workaround is to use `show` prop on screen containers,
          and then manually configure that into those containers.-->

    <headnav
      title="Lightning Cards"
      session={ props.deck.currentSession }>
    </headnav>

    <main-menu
      show={ state.currentScreen === 'main menu' ? true : false }
      current-deck-title={ props.deck.name }
      on-start-practice={ () => openScreen('playing') }
      on-see-deck={ () => openScreen('deck view') }
    ></main-menu>

    <deck-edit-container
      show={ state.currentScreen === 'deck view' ? true : false }
      deck={ props.deck }
      update-deck={ updateDeck }
      onBackToMenu={ () => openScreen('main menu') }
    >
    </deck-edit-container>

    <playing-container
      show={ state.currentScreen === 'playing' ? true : false }
      card={state.cardBeingShown}
      out-of-cards={ state.outOfCards}
      session={ props.deck.currentSession }
      load-next-card={ loadNextCard }
      update-deck={ updateDeck }
      on-practice-again={ startNewSession }
      on-edit-deck={ () => openScreen('deck view') }
    ></playing-container>


  </div>

  <style>
    :host {
      display: block;
      margin-top: 20px;
    }
  </style>

  <script>
  export default {
    onBeforeMount() {
      this.props.deck.getFromLocalStorage()
      
      this.props.deck.shuffleAllCards()
      let firstcard = this.props.deck.drawCard()

      this.state = {
        currentScreen: 'main menu',
        cardBeingShown: firstcard,
        outOfCards: false,
        notificationMessage: '',
      }
    },

    updateDeck() {
      this.props.deck.saveToLocalStorage()
      this.update()
    },

    loadNextCard() {
      let nextCard = this.props.deck.drawCard()

      if (nextCard !== undefined) {
        this.update({
          cardBeingShown: nextCard,
        })
      }

      else {
        this.update({
          outOfCards: true
        })
      }
    },

    startNewSession() {
      this.props.deck.startNewSession()

      this.update({
        outOfCards: false,
        firstcard: this.props.deck.drawCard()
      })
    },

    openScreen (screen) {
      if (screen === 'deck view' || screen === 'main menu' || screen === 'playing') {
        this.update({
          currentScreen: screen
        })
      } else {
        // Put error notification
      }
    },
  }
  </script>

</container>
