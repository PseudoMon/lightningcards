<container>
  <div>
    <notification>{ state.notificationMessage }</notification>

    <!-- Somehow I can't use if={true} in this main container.
          The workaround is to use `show` prop on screen containers,
          and then manually configure that into those containers.-->

    <headnav
      title="Lightning Cards"
      session={ props.deck.currentSession }
      on-open-screen={ (screen) => openScreen(screen) }
    >
    </headnav>

    <about
      show={ state.currentScreen === 'about' ? true : false }>
    </about>

    <main-menu
      show={ state.currentScreen === 'main menu' ? true : false }
      current-deck-title={ props.deck.name }
      on-change-setting = { (s) => changeSessionSetting(s)}
      on-start-practice={ () => openScreen('playing') }
      on-see-deck={ () => openScreen('deck view') }
    ></main-menu>

    <deck-edit-container
      show={ state.currentScreen === 'deck view' ? true : false }
      deck={ props.deck }
      update-deck={ updateDeck }
      onBackToMenu={ () => openScreen('main menu') }
    >
    </deck-edit-container>

    <playing-container
      show={ state.currentScreen === 'playing' ? true : false }
      card={state.cardBeingShown}
      out-of-cards={ state.outOfCards}
      session={ props.deck.currentSession }
      load-next-card={ loadNextCard }
      update-deck={ updateDeck }
      on-practice-again={ startNewSession }
      on-edit-deck={ () => openScreen('deck view') }
    ></playing-container>

    <footernav
      on-click-about={ () => openScreen('about') }
    ></footernav>


  </div>

  <style>
    :host {
      display: block;
      margin-top: 20px;
    }
  </style>

  <script>
  export default {
    onBeforeMount() {
      this.props.deck.getFromLocalStorage()

      this.props.deck.shuffleAllCards()
      let firstcard = this.props.deck.drawCard()

      this.state = {
        currentScreen: 'main menu',
        cardBeingShown: firstcard,
        outOfCards: false,
        notificationMessage: '',
        sessionSetting: 'default',
      }

      this.possibleScreens = [
        'deck view', 'main menu', 'playing', 'setting', 'about'
      ]
    },

    updateDeck() {
      this.props.deck.saveToLocalStorage()
      this.update()
    },

    loadNextCard() {
      let nextCard = this.props.deck.drawCard()

      if (nextCard !== undefined) {
        this.update({
          cardBeingShown: nextCard,
        })
      }

      else {
        this.update({
          outOfCards: true
        })
      }
    },

    startNewSession() {
      this.props.deck.startNewSession(this.state.sessionSetting)

      // Give warning window whenever user try to leave
      window.onbeforeunload = function() {
          return true;
      };

      this.update({
        outOfCards: false,
        cardBeingShown: this.props.deck.drawCard()
      })
    },

    changeSessionSetting(setting) {
      this.update({
        sessionSetting: setting
      })
    },

    openScreen (screen) {
      if (screen === 'playing') {
        this.startNewSession()
      }
      else {
        // Remove warning-before-leaving when not currently playing
        window.onbeforeunload = function() {
            return;
        };
      }

      if (this.possibleScreens.includes(screen)) {
        this.update({
          currentScreen: screen
        })
      } else {
        this.update({
          notificationMessage: "Error: No such screen as " + screen + ".",
        })
      }
    },

  }
  </script>

</container>
